#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys

from thrift.transport import TTransport


class FileStructure(object):
    """
    Attributes:
     - name
     - path
     - isFile
     - createdDate
     - modifiedDate
     - content
     - size
     - isExist
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'path', 'UTF8', None, ),  # 2
        (3, TType.BOOL, 'isFile', None, None, ),  # 3
        (4, TType.I64, 'createdDate', None, None, ),  # 4
        (5, TType.I64, 'modifiedDate', None, None, ),  # 5
        (6, TType.STRING, 'content', 'BINARY', None, ),  # 6
        (7, TType.I64, 'size', None, None, ),  # 7
        (8, TType.BOOL, 'isExist', None, None, ),  # 8
    )

    def __init__(self, name=None, path=None, isFile=None, createdDate=None, modifiedDate=None, content=None, size=None, isExist=None,):
        self.name = name
        self.path = path
        self.isFile = isFile
        self.createdDate = createdDate
        self.modifiedDate = modifiedDate
        self.content = content
        self.size = size
        self.isExist = isExist

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.path = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.isFile = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.createdDate = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.modifiedDate = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.content = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.isExist = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('FileStructure')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.path is not None:
            oprot.writeFieldBegin('path', TType.STRING, 2)
            oprot.writeString(self.path.encode('utf-8') if sys.version_info[0] == 2 else self.path)
            oprot.writeFieldEnd()
        if self.isFile is not None:
            oprot.writeFieldBegin('isFile', TType.BOOL, 3)
            oprot.writeBool(self.isFile)
            oprot.writeFieldEnd()
        if self.createdDate is not None:
            oprot.writeFieldBegin('createdDate', TType.I64, 4)
            oprot.writeI64(self.createdDate)
            oprot.writeFieldEnd()
        if self.modifiedDate is not None:
            oprot.writeFieldBegin('modifiedDate', TType.I64, 5)
            oprot.writeI64(self.modifiedDate)
            oprot.writeFieldEnd()
        if self.content is not None:
            oprot.writeFieldBegin('content', TType.STRING, 6)
            oprot.writeBinary(self.content)
            oprot.writeFieldEnd()
        if self.size is not None:
            oprot.writeFieldBegin('size', TType.I64, 7)
            oprot.writeI64(self.size)
            oprot.writeFieldEnd()
        if self.isExist is not None:
            oprot.writeFieldBegin('isExist', TType.BOOL, 8)
            oprot.writeBool(self.isExist)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.name is None:
            raise TProtocolException(message='Required field name is unset!')
        if self.path is None:
            raise TProtocolException(message='Required field path is unset!')
        if self.isFile is None:
            raise TProtocolException(message='Required field isFile is unset!')
        if self.createdDate is None:
            raise TProtocolException(message='Required field createdDate is unset!')
        if self.modifiedDate is None:
            raise TProtocolException(message='Required field modifiedDate is unset!')
        if self.size is None:
            raise TProtocolException(message='Required field size is unset!')
        if self.isExist is None:
            raise TProtocolException(message='Required field isExist is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
